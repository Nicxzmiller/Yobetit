{"ast":null,"code":"import axios from 'axios';\nexport class BackendService {\n  constructor() {\n    this.request = axios.create({\n      baseURL: 'http://localhost:4000',\n      validateStatus: false\n    });\n  }\n\n  _call(fn) {\n    return async (...args) => {\n      const response = {\n        data: null,\n        error: null\n      };\n\n      try {\n        const {\n          data\n        } = await fn(...args);\n        if (data.status !== 'success') throw new Error(data.data);\n        response.data = data;\n      } catch (e) {\n        console.error(e);\n        response.error = e;\n      }\n\n      return response;\n    };\n  }\n\n  post(...args) {\n    return this._call(this.request.post)(...args);\n  }\n\n  get(...args) {\n    return this._call(this.request.get)(...args);\n  }\n\n  async login(data = {}) {\n    return this.post('/user/login', data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  async register(data = {}) {\n    return this.post('/user/register', data, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  async getAllCountries(token) {\n    return this.get('/countries/all', {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n  async getByName(name, token) {\n    return this.get(`/countries/${name}`, {\n      headers: {\n        'Authorization': token\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/neech/Desktop/Projects/Yobetit/client/src/services/BackendServices.js"],"names":["axios","BackendService","constructor","request","create","baseURL","validateStatus","_call","fn","args","response","data","error","status","Error","e","console","post","get","login","headers","register","getAllCountries","token","getByName","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,cAAN,CAAqB;AAExBC,EAAAA,WAAW,GAAI;AACX,SAAKC,OAAL,GAAeH,KAAK,CAACI,MAAN,CAAa;AACxBC,MAAAA,OAAO,EAAE,uBADe;AAExBC,MAAAA,cAAc,EAAE;AAFQ,KAAb,CAAf;AAIH;;AAEDC,EAAAA,KAAK,CAAEC,EAAF,EAAM;AACP,WAAO,OAAO,GAAGC,IAAV,KAAmB;AACtB,YAAMC,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAE,IADO;AAEbC,QAAAA,KAAK,EAAE;AAFM,OAAjB;;AAIA,UAAI;AACA,cAAM;AAACD,UAAAA;AAAD,YAAS,MAAMH,EAAE,CAAC,GAAGC,IAAJ,CAAvB;AACA,YAAIE,IAAI,CAACE,MAAL,KAAgB,SAApB,EAA+B,MAAM,IAAIC,KAAJ,CAAUH,IAAI,CAACA,IAAf,CAAN;AAC/BD,QAAAA,QAAQ,CAACC,IAAT,GAAgBA,IAAhB;AACH,OAJD,CAIE,OAAOI,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACJ,KAAR,CAAcG,CAAd;AACAL,QAAAA,QAAQ,CAACE,KAAT,GAAiBG,CAAjB;AACH;;AACD,aAAOL,QAAP;AACH,KAdD;AAeH;;AAEDO,EAAAA,IAAI,CAAE,GAAGR,IAAL,EAAW;AACX,WAAO,KAAKF,KAAL,CAAW,KAAKJ,OAAL,CAAac,IAAxB,EAA8B,GAAGR,IAAjC,CAAP;AACH;;AAEDS,EAAAA,GAAG,CAAE,GAAGT,IAAL,EAAW;AACV,WAAO,KAAKF,KAAL,CAAW,KAAKJ,OAAL,CAAae,GAAxB,EAA6B,GAAGT,IAAhC,CAAP;AACH;;AAED,QAAMU,KAAN,CAAaR,IAAI,GAAG,EAApB,EAAwB;AACpB,WAAO,KAAKM,IAAL,CAAU,aAAV,EAAyBN,IAAzB,EAA+B;AAACS,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAV,KAA/B,CAAP;AACH;;AAED,QAAMC,QAAN,CAAgBV,IAAI,GAAG,EAAvB,EAA2B;AACvB,WAAO,KAAKM,IAAL,CAAU,gBAAV,EAA4BN,IAA5B,EAAkC;AAACS,MAAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAAV,KAAlC,CAAP;AACH;;AAED,QAAME,eAAN,CAAuBC,KAAvB,EAA8B;AAC1B,WAAO,KAAKL,GAAL,CAAS,gBAAT,EAA2B;AAACE,MAAAA,OAAO,EAAE;AAAC,yBAAiBG;AAAlB;AAAV,KAA3B,CAAP;AACH;;AAED,QAAMC,SAAN,CAAiBC,IAAjB,EAAuBF,KAAvB,EAA8B;AAC1B,WAAO,KAAKL,GAAL,CAAU,cAAaO,IAAK,EAA5B,EAA+B;AAACL,MAAAA,OAAO,EAAE;AAAC,yBAAiBG;AAAlB;AAAV,KAA/B,CAAP;AACH;;AAjDuB","sourcesContent":["import axios from 'axios';\r\n\r\nexport class BackendService {\r\n\r\n    constructor () {\r\n        this.request = axios.create({\r\n            baseURL: 'http://localhost:4000',\r\n            validateStatus: false\r\n        });\r\n    }\r\n\r\n    _call (fn) {\r\n        return async (...args) => {\r\n            const response = {\r\n                data: null,\r\n                error: null\r\n            };\r\n            try {\r\n                const {data} = await fn(...args);\r\n                if (data.status !== 'success') throw new Error(data.data);\r\n                response.data = data;\r\n            } catch (e) {\r\n                console.error(e);\r\n                response.error = e;\r\n            }\r\n            return response;\r\n        }\r\n    }\r\n\r\n    post (...args) {\r\n        return this._call(this.request.post)(...args);\r\n    }\r\n\r\n    get (...args) {\r\n        return this._call(this.request.get)(...args);\r\n    }\r\n\r\n    async login (data = {}) {\r\n        return this.post('/user/login', data, {headers: {'Content-Type': 'application/json'}});\r\n    }\r\n\r\n    async register (data = {}) {\r\n        return this.post('/user/register', data, {headers: {'Content-Type': 'application/json'}});\r\n    }\r\n\r\n    async getAllCountries (token) {\r\n        return this.get('/countries/all', {headers: {'Authorization': token}})\r\n    }\r\n\r\n    async getByName (name, token) {\r\n        return this.get(`/countries/${name}`, {headers: {'Authorization': token}})\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}