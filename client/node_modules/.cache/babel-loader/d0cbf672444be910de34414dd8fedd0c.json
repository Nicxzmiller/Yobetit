{"ast":null,"code":"import { AUTH_FAILED, AUTH_REQUESTED, AUTH_SUCCEEDED } from './actions';\nexport const authenticate = (data = {}, action = 'login') => {\n  return async (dispatch, getState, {\n    backendService\n  }) => {\n    const actionMap = {\n      login: backendService.login,\n      register: backendService.register\n    };\n    dispatch({\n      type: AUTH_REQUESTED\n    });\n    const {\n      data,\n      error\n    } = await actionMap[action](data);\n\n    if (error) {\n      return dispatch({\n        type: AUTH_FAILED,\n        payload: error.message\n      });\n    }\n\n    return dispatch({\n      type: AUTH_SUCCEEDED,\n      payload: data\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/neech/Desktop/Projects/yobetit/client/src/store/actions/authActions.js"],"names":["AUTH_FAILED","AUTH_REQUESTED","AUTH_SUCCEEDED","authenticate","data","action","dispatch","getState","backendService","actionMap","login","register","type","error","payload","message"],"mappings":"AAAA,SACIA,WADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,WAJP;AAMA,OAAO,MAAMC,YAAY,GAAG,CAACC,IAAI,GAAG,EAAR,EAAYC,MAAM,GAAG,OAArB,KAAiC;AACzD,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,EAA2B;AAACC,IAAAA;AAAD,GAA3B,KAAgD;AACnD,UAAMC,SAAS,GAAG;AACdC,MAAAA,KAAK,EAAEF,cAAc,CAACE,KADR;AAEdC,MAAAA,QAAQ,EAAEH,cAAc,CAACG;AAFX,KAAlB;AAIAL,IAAAA,QAAQ,CAAC;AAACM,MAAAA,IAAI,EAAEX;AAAP,KAAD,CAAR;AACA,UAAM;AAACG,MAAAA,IAAD;AAAOS,MAAAA;AAAP,QAAgB,MAAMJ,SAAS,CAACJ,MAAD,CAAT,CAAkBD,IAAlB,CAA5B;;AACA,QAAIS,KAAJ,EAAW;AACP,aAAOP,QAAQ,CAAC;AACZM,QAAAA,IAAI,EAAEZ,WADM;AAEZc,QAAAA,OAAO,EAAED,KAAK,CAACE;AAFH,OAAD,CAAf;AAIH;;AACD,WAAOT,QAAQ,CAAC;AACZM,MAAAA,IAAI,EAAEV,cADM;AAEZY,MAAAA,OAAO,EAAEV;AAFG,KAAD,CAAf;AAIH,GAjBD;AAkBH,CAnBM","sourcesContent":["import {\r\n    AUTH_FAILED,\r\n    AUTH_REQUESTED,\r\n    AUTH_SUCCEEDED\r\n} from './actions';\r\n\r\nexport const authenticate = (data = {}, action = 'login') => {\r\n    return async (dispatch, getState, {backendService}) => {\r\n        const actionMap = {\r\n            login: backendService.login,\r\n            register: backendService.register\r\n        };\r\n        dispatch({type: AUTH_REQUESTED});\r\n        const {data, error} = await actionMap[action](data);\r\n        if (error) {\r\n            return dispatch({\r\n                type: AUTH_FAILED,\r\n                payload: error.message\r\n            })\r\n        }\r\n        return dispatch({\r\n            type: AUTH_SUCCEEDED,\r\n            payload: data\r\n        })\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}